# Generated by Django 5.2.4 on 2025-07-28 11:06

from django.db import migrations
from fernet_fields.fields import EncryptedField
from cryptography.fernet import InvalidToken

orig_from_db_value = EncryptedField.from_db_value


def patched_from_db_value(self, value, expression, connection, *args):
    if value is None:
        return None

    # Convert strings to bytes
    if isinstance(value, str):
        value_bytes = value.encode()
    else:
        value_bytes = bytes(value)

    try:
        # Try normal decryption
        decrypted = self.fernet.decrypt(value_bytes)
        return self.to_python(decrypted.decode())
    except InvalidToken:
        # If it wasn't encrypted, just decode bytes to string
        try:
            return self.to_python(value_bytes.decode())
        except Exception:
            return value  # last resort


# Apply the patch
EncryptedField.from_db_value = patched_from_db_value



def encrypt_existing_entries(apps, schema_editor):
    JournalEntry = apps.get_model('journal', 'JournalEntry')
    for entry in JournalEntry.objects.all():
        entry.content = entry.content
        entry.prompt_text = entry.prompt_text
        entry.insight = entry.insight
        entry.save(update_fields=['content', 'prompt_text', 'insight'])


class Migration(migrations.Migration):
    dependencies = [
        ("journal", "0003_remove_billing_is_active_and_more"),
    ]

    operations = [
        migrations.RunPython(encrypt_existing_entries),
    ]
